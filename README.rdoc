= Preheat

Keep your Rails.cache up to date with:
* NO code bloat in your Rails.cache.fetch invocations
* NO tedious dependency setup in a cron task to mimic what your controller does, just so you can call your model/library methods which have the Rails.cache.fetch invocations

Anything executed in a Preheat.it block will change all fetch calls into a fetch calls with :force => true.  (:force => true will force a cache-miss and a subsequent cache-write)

== Installation

1. gem install preheat
2. Add the gem to environment.rb or your Gemfile

== Example

This will "preheat" all your Rails.cache.fetch calls on your homepage.  That's all you need!

  Preheat.it do
    app.get("/")
  end

Here's how you could update all of your product pages:

  Preheat.it do
    @products = Product.all
    @products.each do |product|
      app.get(app.products_path(product))
    end
  end

Note: If you have not seen "app.get" used before, the app object is not related to my preheat gem.  It ships with rails: http://www.clarkware.com/cgi/blosxom/2006/04/04.  I use app.get because ActiveSupport's fetch method is being modified only in the ruby process which is using Preheat, so something like devise/wget/curl would call the page through your frontend webserver and would not be effected by Preheat.it, while app.get will directly call your controller in that same ruby process.


An example without app.get:

  Preheat.it do
    Product.first.really_slow_class_method_which_uses_caching
  end

== Thanks

Thank you to Brian Guthrie for getting me learned up on gem dependencies and the like.




